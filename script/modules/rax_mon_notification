#!/usr/bin/python
#
# This is a module in development for Ansible.

DOCUMENTATION = '''
module: rax_mon_notification
short_description: create / delete a Rackspace Cloud Monitoring notification
description:
- create / delete a Rackspace Cloud Monitoring notification to create a channel
  that can be used to communicate alarms.
version_added: "1.6.2"
options:
  state:
    description:
    - Create or destroy the notification with this label.
    choices: ['present', 'absent']
    default: present
  label:
    description:
    - Defines a friendly name for this notification. String between 1 and 255
      characters long.
    required: true
  notification_type:
    description:
    - A supported notification type.
    choices:
    - webhook
    - email
    - pagerduty
    required: true
  details:
    description:
    - Dictionary of key-value pairs used to initialize the notification.
    - Required keys and meanings vary with notification type.
    required: true
'''

EXAMPLES = '''
- name: Create a monitoring notification
  gather_facts: False
  hosts: local
  connection: local
  tasks:
  - name: Create a monitoring notification
    rax_mon_entity:
      credentials: ~/.rax_pub
      label: omg
      type: email
      details:
        address: me@gmail.com
    register: notification
'''

try:
    import pyrax
    HAS_PYRAX = True
except ImportError:
    HAS_PYRAX = False

def notification(module, state, label, notification_type, details):

    if not label:
        module.fail_json(msg='label is required for rax_mon_notification')

    if len(label) < 1 or len(label) > 255:
        module.fail_json(msg='label must be between 1 and 255 characters long')

    if not notification_type:
        module.fail_json(msg='you must provide a notification_type')

    if not details:
        module.fail_json(msg='notification details are required')

    changed = False
    notification = None

    cm = pyrax.cloud_monitoring
    if not cm:
        module.fail_json(msg='Failed to instantiate client. This typically '
                             'indicates an invalid region or an incorrectly '
                             'capitalized region name.')

    existing = []
    for n in cm.list_notifications():
        if n.label == label:
            existing.append(n)

    if len(existing) > 1 and state == 'present':
        module.fail_json(msg='Multiple notifications were matched by label.')

    if existing:
        notification = existing[0]

    if state == 'present':
        if notification:
            different = (details != notification.details)

            if different:
                notification.update(details=notification.details)
                changed = True
        else:
            notification = cm.create_notification(notification_type,
                                                  label=label, details=details)
            changed = True
    elif state == 'absent':
        for n in existing:
            n.delete()
            changed = True
    else:
        module.fail_json(msg='state must be either "present" or "absent"')

    notification_dict = {
        "id": notification.id,
        "type": notification.type,
        "label": notification.label,
        "details": notification.details
    }
    module.exit_json(changed=changed, notification=notification_dict)

def main():
    argument_spec = rax_argument_spec()
    argument_spec.update(
        dict(
            state=dict(default='present'),
            label=dict(),
            notification_type=dict(),
            details=dict(type='dict', default={})
        )
    )

    module = AnsibleModule(
        argument_spec=argument_spec,
        required_together=rax_required_together()
    )

    if not HAS_PYRAX:
        module.fail_json(msg='pyrax is required for this module')

    state = module.params.get('state')

    label = module.params.get('label')
    notification_type = module.params.get('notification_type')
    details = module.params.get('details')

    setup_rax_module(module, pyrax)

    notification(module, state, label, notification_type, details)

# Import module snippets
from ansible.module_utils.basic import *
from ansible.module_utils.rax import *

# Invoke the module.
main()
