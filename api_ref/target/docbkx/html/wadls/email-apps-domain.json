{ "_version":"1.0", "metadata":{ "FORMAT":{ "value":"1A" } }, "name":"", "description":"", "resourceGroups":[ { "name":"All Methods", "description":"", "resources":[ { "name":"", "description":"", "uriTemplate":"customers/{customer_account_number}/domains", "parameters":{ "customer_account_number":{ "description":"The customer account\n number.\n", "type":"", "required":"true", "default":"", "example":"", "values":[  ] } }, "headers":{  }, "actions":[ { "method":"GET", "name":"List domains", "description":"\n Lists domains in a specified\n account.\n If you specify a customer account, a list of domains\n under that specific account is returned.\n Remarks\n \n \n To retrieve a list of domains owned by the\n account that is logged in, use \"me\" as the\n customer account number i.e.\n 'https:\/\/api.emailsrvr.com\/v0\/customers\/me\/domains'.\n To retrieve a list of domains owned by all\n customer sub-accounts and your own account,\n use \"all\" as the customer account\n number.\n \n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"GET\n '\/customers\/all\/domains?size=100\\u0026offset=10',\n 'text\/xml'\" });", "schema":"" } ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n <domainList\n xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n xmlns:xsd=\"http:\/\/www.w3.org\/2001\/XMLSchema\"\n xmlns=\"urn:xml:domainList\">\n <offset>0<\/offset>\n <size>50<\/size>\n <total>3<\/total> <domains>\n <domain>\n <name>apidomain53.com<\/name>\n <accountNumber>100000<\/accountNumber>\n <serviceType>both<\/serviceType>\n <\/domain> <domain>\n <name>apidomain66.com<\/name>\n <accountNumber>100001<\/accountNumber>\n <serviceType>both<\/serviceType>\n <\/domain> <domain>\n <name>apidomain68.com<\/name>\n <accountNumber>100002<\/accountNumber>\n <serviceType>both<\/serviceType>\n <\/domain> <\/domains>\n <\/domainList>", "schema":"" }, { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\"offset\":0,\"size\":50,\"total\":3,\"domains\":\n [{\"name\":\"apidomain53.com\",\"accountNumber\":\"100000\",\"serviceType\":\"both\"},\n {\"name\":\"apidomain66.com\",\"accountNumber\":\"100001\",\"serviceType\":\"both\"},\n {\"name\":\"apidomain68.com\",\"accountNumber\":\"100002\",\"serviceType\":\"both\"}]}", "schema":"" } ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"customers/{customer_account_number}/domains/{domain_name}", "parameters":{ "customer_account_number":{ "description":"The customer account\n number.\n", "type":"", "required":"true", "default":"", "example":"", "values":[  ] }, "domain_name":{ "description":"The domain\n name.\n", "type":"", "required":"true", "default":"", "example":"", "values":[  ] } }, "headers":{  }, "actions":[ { "method":"GET", "name":"Show domain details", "description":"\n Shows domain details.\n Remarks\n \n \n The show operation only supports the GET\n HTTP verb.\n \n \n Notes\n \n \n These two fields 'exchangeUsedStorage' and\n 'rsEmailUsedStorage' actually return the\n number of active mailboxes in each service\n respectively.\n \n \n Due to a performance issue Domain Public\n Folder Status is now returned from an\n individual URL. The field\n 'publicFoldersEnabled' from Show Domain result\n always returns 'false' at this moment.\n \n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"GET '\/customers\/999999\/domains\/example.com',\n 'text\/xml'\" });", "schema":"" } ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n <domain\n xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n xmlns:xsd=\"http:\/\/www.w3.org\/2001\/XMLSchema\"\n xmlns=\"urn:xml:domain\">\n <name>apidomain21.com<\/name>\n <accountNumber>100000<\/accountNumber>\n <serviceType>both<\/serviceType>\n <exchangeBaseMailboxSize>2048<\/exchangeBaseMailboxSize>\n <exchangeUsedStorage>0<\/exchangeUsedStorage>\n <exchangeTotalStorage>18432<\/exchangeTotalStorage>\n <exchangeExtraStorage>10240<\/exchangeExtraStorage>\n <exchangeMaxNumMailboxes>4<\/exchangeMaxNumMailboxes>\n <rsEmailBaseMailboxSize>2048<\/rsEmailBaseMailboxSize>\n <rsEmailMaxNumberMailboxes>4<\/rsEmailMaxNumberMailboxes>\n <rsEmailExtraStorage>10240<\/rsEmailExtraStorage>\n <rsEmailUsedStorage>0<\/rsEmailUsedStorage>\n <aliases \/>\n <archivingServiceEnabled>false<\/archivingServiceEnabled>\n <publicFoldersEnabled>false<\/publicFoldersEnabled>\n <blackBerryMobileServiceEnabled>true<\/blackBerryMobileServiceEnabled>\n <blackBerryLicenses>4<\/blackBerryLicenses>\n <activeSyncMobileServiceEnabled>true<\/activeSyncMobileServiceEnabled>\n <activeSyncLicenses>4<\/activeSyncLicenses>\n <\/domain>", "schema":"" }, { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\"name\":\"apidomain21.com\",\"accountNumber\":\"100000\",\"serviceType\":\"both\",\n \"exchangeBaseMailboxSize\":2048,\"exchangeUsedStorage\":0,\"exchangeTotalStorage\":18432,\n \"exchangeExtraStorage\":10240,\"exchangeMaxNumMailboxes\":4,\"rsEmailBaseMailboxSize\":2048,\n \"rsEmailMaxNumberMailboxes\":4,\"rsEmailExtraStorage\":10240,\"rsEmailUsedStorage\":0,\n \"aliases\":[],\"archivingServiceEnabled\":false,\"publicFoldersEnabled\":false,\n \"blackBerryMobileServiceEnabled\":true,\"blackBerryLicenses\":4,\"activeSyncMobileServiceEnabled\":true,\n \"activeSyncLicenses\":4}", "schema":"" } ] } ] }, { "method":"POST", "name":"Add domain (reseller only)", "description":"\n Adds a domain and specified data to\n an account.\n \n \n Adds a domain to the\n account with the data specified.\n \n \n To add a domain to your own account, use\n your own account id.\n \n \n \n Request Data\n \n \n \n Field Name\n \n \n Data Type\n \n \n Description\n \n \n \n \n \n serviceType\n string\n Domain service type. \"rsemail\" =\n \"Rackspace Email Only\". \"exchange\" =\n \"Exchange Only\". \"both\" = \"Rackspace Email\n and Exchange\"\n \n \n exchangeExtraStorage\n int\n Exchange service extra storage in\n megabytes\n \n \n exchangeMaxNumMailboxes\n int\n Maximum number of mailboxes allowed under\n the domain Exchange service. Required for\n Adding Exchange service\n \n \n rsEmailBaseMailboxSize\n int\n Rackspace Email base mailbox size in\n megabytes\n \n \n rsEmailMaxNumberMailboxes\n int\n Maximum number of mailboxes allowed under\n the domain Rackspace Email service.\n Required for Adding Rackspace Email\n service\n \n \n rsEmailExtraStorage\n int\n Rackspace Email service extra storage in\n megabytes\n \n \n blackBerryMobileServiceEnabled\n boolean\n Enable or disable domain BlackBerry Mobile\n service\n \n \n blackBerryLicenses\n int\n Maximum number of mailboxes allowed to\n have BlackBerry Mobile service. 0 means\n unlimited\n \n \n activeSyncMobileServiceEnabled\n boolean\n Enable or disable domain ActiveSync Mobile\n service\n \n \n activeSyncLicenses\n int\n Maximum number of mailboxes allowed to\n have ActiveSync Mobile service. 0 means\n unlimited\n \n \n goodMobileServiceEnabled (deprecated)\n boolean\n Enable or disable domain Good Mobile\n service\n \n \n goodMobileLicenses (deprecated)\n int\n Maximum number of mailboxes allowed to\n have Good Mobile service. 0 means\n unlimited\n \n \n archivingServiceEnabled\n boolean\n Enable or disable domain archiving\n service\n \n \n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"POST\n '\/customers\/123455\/domains\/newcompany.com',\n 'text\/xml', { 'maxNumMailboxes' =\\u003E '5',\n 'extraStorage' =\\u003E '1024' }\"\n });", "schema":"" } ], "responses":[  ] } ] }, { "method":"PUT", "name":"Update domain (reseller only)", "description":"\n Updates a domain with specified\n data.\n \n Request Data\n \n \n \n Field Name\n \n \n Data Type\n \n \n Description\n \n \n \n \n \n serviceType\n string\n Domain service type. \"rsemail\" =\n \"Rackspace Email Only\". \"exchange\" =\n \"Exchange Only\". \"both\" = \"Rackspace Email\n and Exchange\"\n \n \n exchangeExtraStorage\n int\n Exchange service extra storage in\n megabytes\n \n \n exchangeMaxNumMailboxes\n int\n Maximum number of mailboxes allowed under\n the domain Exchange service. Required for\n Adding Exchange service\n \n \n rsEmailBaseMailboxSize\n int\n Rackspace Email base mailbox size in\n megabytes\n \n \n rsEmailMaxNumberMailboxes\n int\n Maximum number of mailboxes allowed under\n the domain Rackspace Email service.\n Required for Adding Rackspace Email\n service\n \n \n rsEmailExtraStorage\n int\n Rackspace Email service extra storage in\n megabytes\n \n \n blackBerryMobileServiceEnabled\n boolean\n Enable or disable domain BlackBerry Mobile\n service\n \n \n blackBerryLicenses\n int\n Maximum number of mailboxes allowed to\n have BlackBerry Mobile service. 0 means\n unlimited\n \n \n activeSyncMobileServiceEnabled\n boolean\n Enable or disable domain ActiveSync Mobile\n service\n \n \n activeSyncLicenses\n int\n Maximum number of mailboxes allowed to\n have ActiveSync Mobile service. 0 means\n unlimited\n \n \n goodMobileServiceEnabled (deprecated)\n boolean\n Enable or disable domain Good Mobile\n service\n \n \n goodMobileLicenses (deprecated)\n int\n Maximum number of mailboxes allowed to\n have Good Mobile service. 0 means\n unlimited\n \n \n archivingServiceEnabled\n boolean\n Enable or disable domain archiving\n service\n \n \n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"PUT\n '\/customers\/123455\/domains\/newcompany.com',\n 'text\/xml', { 'maxNumMailboxes' =\\u003E '25',\n 'extraStorage' =\\u003E '2048' }\"\n });", "schema":"" } ], "responses":[  ] } ] }, { "method":"PUT", "name":"Move domain (reseller only)", "description":"\n Moves a domain to a specified\n customer account.\n Remarks\n 'Move Domain' and 'Edit Domain' share the same URI\n and HTTP verb. When the domain doesn't belong to the\n customer and 'moveDomain' is set to 'true', API will\n take the request as a 'Move Domain' call.\n \n Request Data\n \n \n \n Field Name\n \n \n Data Type\n \n \n Description\n \n \n \n \n \n moveDomain\n boolean\n Indicate whether or not moving the\n domain\n \n \n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"PUT\n '\/customers\/123456\/domains\/newcompany.com',\n 'text\/xml', { 'moveDomain' =\\u003E 'true' }\"\n });", "schema":"" } ], "responses":[  ] } ] }, { "method":"DELETE", "name":"Delete domain (reseller only)", "description":"\n Deletes a domain.\n Remarks\n The domain and all the mailboxes, mailbox contents,\n groups, and contacts are deleted permanently.\n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"DELETE\n '\/customers\/12345678\/domains\/newcompany.com',\n 'text\/xml'\" });", "schema":"" } ], "responses":[  ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"customers/{customer_account_number}/domains/{domain_name}/alternatedomains", "parameters":{ "customer_account_number":{ "description":"The customer account\n number.\n", "type":"", "required":"true", "default":"", "example":"", "values":[  ] }, "domain_name":{ "description":"The domain\n name.\n", "type":"", "required":"true", "default":"", "example":"", "values":[  ] } }, "headers":{  }, "actions":[ { "method":"GET", "name":"List domain aliases and alternate domains (reseller only)", "description":"\n Lists domain aliases and accepted\n alternate domains for a specified domain.\n \n \n This operation Lists Domain Aliases and\n Accepted Domains for the domain.\n \n \n The type of the alternate domain is\n indicated by the 'type' data field.\n \n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"GET\n '\/customers\/12345678\/domains\/test.com\/alternatedomains',\n 'text\/xml'\" });", "schema":"" } ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n <alternateDomainList\n xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n xmlns:xsd=\"http:\/\/www.w3.org\/2001\/XMLSchema\"\n xmlns=\"urn:xml:domainAlternateList\">\n <alternateDomains>\n <alternateDomain>\n <name>domainalias.com<\/name>\n <type>DomainAlias<\/type>\n <\/alternateDomain>\n <alternateDomain>\n <name>accepteddomain.com<\/name>\n <type>AcceptedDomain<\/type>\n <\/alternateDomain>\n <\/alternateDomains>\n <\/alternateDomainList>", "schema":"" }, { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\"alternateDomains\":[{\"name\":\"domainalias.com\",\"type\":\"DomainAlias\"},{\"name\":\"accepteddomain.com\",\"type\":\"AcceptedDomain\"}]}", "schema":"" } ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"customers/{customer_account_number}/domains/{domain_name}/alternatedomains/{alternate_domain_name}", "parameters":{ "customer_account_number":{ "description":"The customer account\n number.\n", "type":"", "required":"true", "default":"", "example":"", "values":[  ] }, "domain_name":{ "description":"The domain\n name.\n", "type":"", "required":"true", "default":"", "example":"", "values":[  ] }, "alternate_domain_name":{ "description":"The alternate\n domain name.\n", "type":"", "required":"true", "default":"", "example":"", "values":[  ] } }, "headers":{  }, "actions":[ { "method":"POST", "name":"Add domain alias or alternate domain (reseller only)", "description":"\n Adds a domain alias or accepted\n alternate domain to a specified domain.\n \n Request Data\n \n \n \n Field Name\n \n \n Data Type\n \n \n Description\n \n \n \n \n \n type\n string\n Alternate domain type. Send \"DomainAlias\"\n for a domain alias, and \"AcceptedDomain\"\n for an accepted domain. (Required)\n \n \n createForExistingRecipients\n boolean\n Whether the alternate addresses should be\n created for existing mailboxes when adding\n an Accepted Domain. Sending this field in\n the request when the type is Domain Alias\n will throw an error. This defaults to\n false.\n \n \n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"POST\n '\/customers\/123456\/domains\/example.com\/alternatedomains\/accepteddomain.com',\n 'text\/xml', { 'type' =\\u003E 'AcceptedDomain'\n 'createForExistingRecipients' =\\u003E 'true'\n }\" });", "schema":"" } ], "responses":[  ] } ] }, { "method":"DELETE", "name":"Delete alternate domain (reseller only)", "description":"\n Deletes an alternate domain.\n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"DELETE\n '\/customers\/12345678\/domains\/example.com\/alternatedomains\/accepteddomain.com'\"\n });", "schema":"" } ], "responses":[  ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"customers/{customer_account_number}/domains/{domain_name}/splitdomainrouting", "parameters":{ "customer_account_number":{ "description":"The customer account\n number.\n", "type":"", "required":"true", "default":"", "example":"", "values":[  ] }, "domain_name":{ "description":"The domain\n name.\n", "type":"", "required":"true", "default":"", "example":"", "values":[  ] } }, "headers":{  }, "actions":[ { "method":"GET", "name":"Show external email server details (split domain routing)", "description":"\n Shows current external email server\n details.\n \n \n Shows the current external\n email server.\n \n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"GET\n '\/customers\/12345678\/domains\/company.com\/splitdomainrouting',\n 'text\/xml'\" });", "schema":"" } ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n <splitDomainRouting\n xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n xmlns:xsd=\"http:\/\/www.w3.org\/2001\/XMLSchema\"\n xmlns=\"urn:xml:splitDomainRouting\">\n <externalServer>email.externalserver.com<\/externalServer>\n <\/splitDomainRouting>", "schema":"" }, { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\"externalServer\":\"email.externalserver.com\"}", "schema":"" } ] } ] }, { "method":"PUT", "name":"Set external email server details (split domain routing)", "description":"\n Sets the external email server\n details.\n This command will return a success when the\n verification passes. Since this involves communication\n to the external server the request may take some time.\n If the verification fails a 400 return code is sent\n back with the verification's error message.\n \n Request Data\n \n \n \n Field Name\n \n \n Data Type\n \n \n Description\n \n \n \n \n \n externalServer\n string\n The address of the external email server.\n To turn off split domain routing send\n 'none'. (Required)\n \n \n verificationAddress\n string\n An email address part of your domain or\n one of the alternate domains that the\n external server is already set up to\n handle. (Required only when turning on\n split domain routing, Do not send this\n field if turning off.)\n \n \n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"PUT\n '\/customers\/12345678\/domains\/company.com\/splitdomainrouting',\n 'text\/xml', { 'externalServer' =\\u003E\n 'email.externalserver.com',\n 'verificationAddress' =\\u003E\n 'externalaccount@company.com', }\"\n });", "schema":"" } ], "responses":[  ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"customers/{customer_account_number}/domains/{domain_name}/archivingSSOLoginURL", "parameters":{ "customer_account_number":{ "description":"The customer account\n number.\n", "type":"", "required":"true", "default":"", "example":"", "values":[  ] }, "domain_name":{ "description":"The domain\n name.\n", "type":"", "required":"true", "default":"", "example":"", "values":[  ] } }, "headers":{  }, "actions":[ { "method":"GET", "name":"Show archiving SSO login URL", "description":"\n Shows the domain archiving service\n SSO login URL.\n Remarks\n The retrieved URL can be used in browser to access\n the domain archiving control panel.\n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"GET\n '\/customers\/12345678\/domains\/company.com\/archivingSSOLoginURL',\n 'text\/xml'\" });", "schema":"" } ], "responses":[  ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"customers/{customer_account_number}/domains/{domain_name}/ex/publicfolders", "parameters":{ "customer_account_number":{ "description":"The customer account\n number.\n", "type":"", "required":"true", "default":"", "example":"", "values":[  ] }, "domain_name":{ "description":"The domain\n name.\n", "type":"", "required":"true", "default":"", "example":"", "values":[  ] } }, "headers":{  }, "actions":[ { "method":"GET", "name":"Show Exchange public folders status", "description":"\n Shows the Exchange public folders\n status for the domain.\n \n \n Shows the Exchange public\n folders status for the domain.\n \n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"GET\n '\/customers\/12345678\/domains\/company.com\/ex\/publicFolders',\n 'text\/xml'\" });", "schema":"" } ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n <?xml version=\"1.0\" encoding=\"utf-8\"?>\n <domainPublicFolders\n xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n xmlns:xsd=\"http:\/\/www.w3.org\/2001\/XMLSchema\"\n xmlns=\"urn:xml:domainPublicFolders\">\n <enabled>true<\/enabled>\n <\/domainPublicFolders>", "schema":"" } ] } ] }, { "method":"PUT", "name":"Enable Exchange public folders feature", "description":"\n Enables the Exchange public folders\n feature on the domain. Once enabled, it cannot be\n disabled.\n \n Request Data\n \n \n \n Field Name\n \n \n Data Type\n \n \n Description\n \n \n \n \n \n enabled\n string\n Whether to enable public folders. Once\n enabled, it cannot be disabled.\n \n \n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"PUT\n '\/customers\/12345678\/domains\/company.com\/ex\/publicFolders',\n 'text\/xml', { 'enabled' =\\u003E 'true' }\"\n });", "schema":"" } ], "responses":[  ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"customers/{customer_account_number}/domains/{domain_name}/emaileveryone", "parameters":{ "customer_account_number":{ "description":"The customer account\n number.\n", "type":"", "required":"true", "default":"", "example":"", "values":[  ] }, "domain_name":{ "description":"The domain\n name.\n", "type":"", "required":"true", "default":"", "example":"", "values":[  ] } }, "headers":{  }, "actions":[ { "method":"POST", "name":"Send an email to everyone on the domain", "description":"\n Sends an email to all mailboxes in\n the domain.\n This request Lists recipients.\n \n \n Send an email to all mailboxes for the\n domain. This request Lists recipients.\n \n \n Alternate route: \/v0\/domains\/{domain\n name}\/emaileveryone\n \n \n \n Request Data\n \n \n \n Field Name\n \n \n Data Type\n \n \n Description\n \n \n \n \n \n fromName\n string\n Sender's Name\n \n \n fromAddress\n string\n Sender's Email Address\n \n \n subject\n string\n Message subject\n \n \n body\n string\n Message body\n \n \n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"POST\n '\/customers\/12345678\/domains\/example.com\/emaileveryone',\n 'text\/xml', { 'fromName' =\\u003E 'John Doe',\n 'fromAddress' =\\u003E 'john.doe@test.com',\n 'subject' =\\u003E 'Hi All', 'body' =\\u003E\n 'Hello World.', }\" });", "schema":"" } ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n <emailAddressList\n xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n xmlns:xsd=\"http:\/\/www.w3.org\/2001\/XMLSchema\"\n xmlns=\"urn:xml:emailAddressList\">\n <emailAddresses>\n <address>a@example.com<\/address>\n <address>b@example.com<\/address>\n <\/emailAddresses>\n <\/emailAddressList>", "schema":"" }, { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\"emailAddresses\":[\"a@example.com\",\"b@example.com\"]}", "schema":"" } ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"customers/{customer_account_number}/domains/{domain_name}/catchalladdress", "parameters":{ "customer_account_number":{ "description":"The customer account\n number.\n", "type":"", "required":"true", "default":"", "example":"", "values":[  ] }, "domain_name":{ "description":"The domain\n name.\n", "type":"", "required":"true", "default":"", "example":"", "values":[  ] } }, "headers":{  }, "actions":[ { "method":"GET", "name":"Show catch-all address", "description":"\n Shows the catch-all address for the\n domain.\n Returns empty string when no catch-all address set\n for the domain.\n \n \n Return the catch-all address for the domain.\n Returns empty string when no catch-all address\n set for the domain.\n \n \n Alternate route: \/v0\/domains\/{domain\n name}\/catchalladdress\n \n \n Remarks\n When an email is sent to a mailbox that does not\n exist on your domain, deliver the email to this\n address.\n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"GET\n '\/customers\/999999\/domains\/example.com\/catchalladdress',\n 'text\/xml'\" });", "schema":"" } ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n <emailAddress\n xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n xmlns:xsd=\"http:\/\/www.w3.org\/2001\/XMLSchema\"\n xmlns=\"urn:xml:emailAddress\">\n <address>abc@example.com<\/address>\n <\/emailAddress>", "schema":"" }, { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\"address\":\"abc@example.com\"}", "schema":"" } ] } ] }, { "method":"PUT", "name":"Update catch-all address", "description":"\n Updates the catch-all address for\n the domain.\n \n \n Updates the catch-all\n address for the domain.\n \n \n Alternate route: \/v0\/domains\/{domain\n name}\/catchalladdress\n \n \n Remarks\n When an email is sent to a mailbox that does not\n exist on your domain, deliver the email to this\n address.\n Notes\n This request may take about 1-2 minutes to be\n applied to the domain.\n \n Request Data\n \n \n \n Field Name\n \n \n Data Type\n \n \n Description\n \n \n \n \n \n address\n string\n The Catch-All email address. Set address\n to empty string to remove catch-all\n address.\n \n \n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"PUT\n '\/customers\/12345678\/domains\/example.com\/emaileveryone',\n 'text\/xml', { 'address' =\\u003E\n 'abc@example.com' }\" });", "schema":"" } ], "responses":[  ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"customers/{customer_account_number}/domains/{domain_name}/spam/settings", "parameters":{ "customer_account_number":{ "description":"The customer account\n number.\n", "type":"", "required":"true", "default":"", "example":"", "values":[  ] }, "domain_name":{ "description":"The domain\n name.\n", "type":"", "required":"true", "default":"", "example":"", "values":[  ] } }, "headers":{  }, "actions":[ { "method":"GET", "name":"Show spam settings", "description":"\n Shows the spam settings for a\n domain.\n Remarks\n \n \n The Show operation only supports the GET\n HTTP verb.\n \n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"GET\n '\/customers\/12345678\/domains\/example.com\/spam\/settings',\n 'text\/xml'\" });", "schema":"" } ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n <domainSpamSettings\n xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n xmlns:xsd=\"http:\/\/www.w3.org\/2001\/XMLSchema\"\n xmlns=\"urn:xml:DomainSpamSettings\">\n <filterLevel>on<\/filterLevel>\n <rsEmailSettings>\n <spamHandling>toAddress<\/spamHandling>\n <hasFolderCleaner>false<\/hasFolderCleaner>\n <spamFolderAgeLimit>0<\/spamFolderAgeLimit>\n <spamFolderNumLimit>0<\/spamFolderNumLimit>\n <spamForwardingAddress>someone@mail.com<\/spamForwardingAddress>\n <\/rsEmailSettings>\n <exchangeSettings>\n <forwardToDomainQuarantine>on<\/forwardToDomainQuarantine>\n <quarantineOwner>someone@mail.com<\/quarantineOwner>\n <defaultQuarantineOwner>someone@mail.com<\/defaultQuarantineOwner>\n <\/exchangeSettings>\n <\/domainSpamSettings>", "schema":"" }, { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\"filterLevel\":\"on\",\"rsEmailSettings\":{\"spamHandling\":\"toAddress\",\"hasFolderCleaner\":false,\"spamFolderAgeLimit\":0,\"spamFolderNumLimit\":0,\"spamForwardingAddress\":\"someone@mail.com\"},\"exchangeSettings\":{\"forwardToDomainQuarantine\":\"on\",\"quarantineOwner\":\"someone@mail.com\",\"defaultQuarantineOwner\":\"someone@mail.com\"}}", "schema":"" } ] } ] }, { "method":"PUT", "name":"Update spam settings", "description":"\n Updates spam settings for a\n domain.\n \n Request Data\n \n \n \n Field Name\n \n \n Data Type\n \n \n Description\n \n \n \n \n \n filterLevel\n string\n Spam filter status, must be 'on' or 'off'\n or 'exclusive' (Required)\n \n \n overrideUserSettings\n boolean\n Set this flag to \"true\" to override\n preferences for all users regardless of\n their own preferences. Otherwise, it sets\n preferences only for users who have not\n set their own.\n \n \n rsEmail.spamHandling\n string\n Change settings for Rackspace Email\n Handling. For the options, see the table\n below.\n \n \n rsEmail.hasFolderCleaner\n boolean\n Turns on\/off Spam Folder Cleaner. Requires\n \"rsEmail.spamHandling\" to be set to\n \"toFolder\".\n \n \n rsEmail.spamFolderAgeLimit\n int\n The number of days that email stays the\n \"Spam\" folder before being deleted.\n Requires \"rsEmail.hasFolderCleaner\" to be\n set to \"true\".\n \n \n rsEmail.spamFolderNumLimit\n int\n The max number of emails that is kept in\n the \"Spam\" folder. Requires\n \"rsEmail.hasFolderCleaner\" to be set to\n \"true\".\n \n \n rsEmail.spamForwardingAddress\n string\n The address that spams is forwarded to.\n Requires \"rsEmail.spamHandling\" to be set\n to \"toAddress\".\n \n \n exchange.forwardToDomainQuarantine\n string\n Change settings for Exchange Handling. For\n the options, see the table below.\n \n \n exchange.quarantineOwner\n string\n The address that domain quarantine\n notifications is sent to.\n \n \n exchange.removeQuarantineOwner\n boolean\n Set this flag to \"true\" to remove domain\n quarantine owner.\n \n \n exchange.defaultQuarantineOwner\n string\n The address that quarantine notifications\n will be sent to. This applies to new users\n and users that have not changed their\n settings to override.\n \n \n exchange.removeDefaultQuarantineOwner\n boolean\n Set this flag to \"true\" to remove default\n domain quarantine owner.\n \n \n \n \n Rackspace Email Handling Options\n \n \n \n Value\n \n \n Description\n \n \n \n \n \n toFolder\n Deliver to Spam folder\n \n \n delete\n Delete the email immediately\n \n \n labelSubject\n Include \"[SPAM]\" at the beginning of the\n subject line\n \n \n toAddress\n Deliver to the email address that is\n specified by\n \"rsEmail.spamForwardingAddress\"\n \n \n \n \n Exchange Handling Options\n \n \n \n Value\n \n \n Description\n \n \n \n \n \n on\n Send all spam to domain quarantine\n \n \n off\n Send spam to recipient's quarantine\n \n \n nonuser\n Send non-user spam (Contacts, Resources,\n etc.) to domain quarantine\n \n \n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"PUT\n '\/customers\/me\/domains\/example.com\/spam\/settings',\n 'text\/xml', { 'filterLevel' =\\u003E 'on',\n 'rsEmail.spamHandling' =\\u003E 'toFolder',\n 'rsEmail.hasFolderCleaner' =\\u003E 'true',\n 'rsEmail.spamFolderAgeLimit' =\\u003E '7',\n 'rsEmail.spamFolderNumLimit' =\\u003E '100', }\"\n });", "schema":"" } ], "responses":[  ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"customers/{customer_account_number}/domains/{domain_name}/spam/blacklist", "parameters":{ "customer_account_number":{ "description":"The customer account\n number.\n", "type":"", "required":"true", "default":"", "example":"", "values":[  ] }, "domain_name":{ "description":"The domain\n name.\n", "type":"", "required":"true", "default":"", "example":"", "values":[  ] } }, "headers":{  }, "actions":[ { "method":"GET", "name":"List email addresses in blacklist", "description":"\n Lists the email addresses in a\n blacklist associated with a domain.\n Remarks\n \n \n The Index operation only supports the GET\n HTTP verb.\n \n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"GET\n '\/customers\/12345678\/domains\/example.com\/spam\/blacklist',\n 'text\/xml'\" });", "schema":"" } ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n <blacklist\n xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n xmlns:xsd=\"http:\/\/www.w3.org\/2001\/XMLSchema\"\n xmlns=\"urn:xml:blacklist\">\n <addresses>\n <address>name1@spam.com<\/address>\n <address>name2@spam.com<\/address>\n <\/addresses>\n <\/blacklist>", "schema":"" }, { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\"addresses\":[\"name1@spam.com\",\"name2@spam.com\"]}", "schema":"" } ] } ] }, { "method":"PUT", "name":"Update email addresses in blacklist", "description":"\n Updates email addresses in a\n blacklist.\n Remarks\n You can use a '%' as a wildcard in domains, but not\n in the TLD (.com, .net, etc). You cannot use wildcards\n in email addresses. For example, the following are\n allowed: @%.example.com, @examp%.com.\n \n Request Data\n \n \n \n Field Name\n \n \n Data Type\n \n \n Description\n \n \n \n \n \n addList\n string\n Comma separated list of email addresses to\n add to the list\n \n \n removeList\n string\n Comma separated list of email addresses to\n remove from the list\n \n \n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"PUT\n '\/customers\/12345678\/domains\/example.com\/spam\/blacklist',\n { 'addList' =\\u003E\n '@%.example.com,abc@example.com', 'removeList'\n =\\u003E '@examp%.com' }, 'text\/xml'\"\n });", "schema":"" } ], "responses":[  ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"customers/{customer_account_number}/domains/{domain_name}/spam/blacklist/{email_address}", "parameters":{ "customer_account_number":{ "description":"The customer account\n number.\n", "type":"", "required":"true", "default":"", "example":"", "values":[  ] }, "domain_name":{ "description":"The domain\n name.\n", "type":"", "required":"true", "default":"", "example":"", "values":[  ] }, "email_address":{ "description":"The email\n address.\n", "type":"", "required":"true", "default":"", "example":"", "values":[  ] } }, "headers":{  }, "actions":[ { "method":"POST", "name":"Add email address or domain to blacklist", "description":"\n Adds an email address or domain to\n a blacklist.\n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"POST\n '\/customers\/12345678\/domains\/example.com\/spam\/blacklist\/anyone@spam.com',\n 'text\/xml'\" });", "schema":"" } ], "responses":[  ] } ] }, { "method":"DELETE", "name":"Delete email address or domain from blacklist", "description":"\n Deletes an email address or domain\n from a blacklist.\n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"DELETE\n '\/customers\/12345678\/domains\/example.com\/spam\/blacklist\/anyone@yahoo.com',\n 'text\/xml'\" });", "schema":"" } ], "responses":[  ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"customers/{customer_account_number}/domains/{domain_name}/spam/ipblacklist", "parameters":{ "customer_account_number":{ "description":"The customer account\n number.\n", "type":"", "required":"true", "default":"", "example":"", "values":[  ] }, "domain_name":{ "description":"The domain\n name.\n", "type":"", "required":"true", "default":"", "example":"", "values":[  ] } }, "headers":{  }, "actions":[ { "method":"GET", "name":"List IP addresses in blacklist", "description":"\n Lists the IP addresses in a\n blacklist associated with a domain.\n Remarks:\n \n \n The Index operation only supports the GET\n HTTP verb.\n \n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"GET\n '\/customers\/12345678\/domains\/example.com\/spam\/ipblacklist',\n 'text\/xml'\" });", "schema":"" } ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n <ipBlacklist\n xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n xmlns:xsd=\"http:\/\/www.w3.org\/2001\/XMLSchema\"\n xmlns=\"urn:xml:ipBlacklist\">\n <addresses>\n <ip>216.12.34.1<\/ip>\n <ip>216.12.34.2<\/ip>\n <\/addresses>\n <\/ipBlacklist>", "schema":"" }, { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\"addresses\":[\"216.12.34.1\",\"216.12.34.2\"]}", "schema":"" } ] } ] }, { "method":"PUT", "name":"Update email addresses in blacklist", "description":"\n Updates the IP addresses in a\n blacklist.\n Remarks\n You can use a '%' as a wildcard in the last octets\n to specify IP ranges. For example: 216.12.34.%,\n 216.12.%.%, 216.%.%.%.\n \n Request Data\n \n \n \n Field Name\n \n \n Data Type\n \n \n Description\n \n \n \n \n \n addList\n string\n Comma separated list of IP addresses to\n add to the list\n \n \n removeList\n string\n Comma separated list of IP addresses to\n remove from the list\n \n \n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"PUT\n '\/customers\/12345678\/domains\/example.com\/spam\/ipblacklist',\n { 'addList' =\\u003E '216.12.34.%,216.12.%.%',\n 'removeList' =\\u003E '216.%.%.%' },\n 'text\/xml'\" });", "schema":"" } ], "responses":[  ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"customers/{customer_account_number}/domains/{domain_name}/spam/ipblacklist/{ip_address}", "parameters":{ "customer_account_number":{ "description":"The customer account\n number.\n", "type":"", "required":"true", "default":"", "example":"", "values":[  ] }, "domain_name":{ "description":"The domain\n name.\n", "type":"", "required":"true", "default":"", "example":"", "values":[  ] }, "ip_address":{ "description":"The IP\n address.\n", "type":"", "required":"true", "default":"", "example":"", "values":[  ] } }, "headers":{  }, "actions":[ { "method":"POST", "name":"Add IP address to blacklist", "description":"\n Adds an IP address to a\n blacklist.\n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"POST\n '\/customers\/12345678\/domains\/example.com\/spam\/blacklist\/216.12.34.1',\n 'text\/xml'\" });", "schema":"" } ], "responses":[  ] } ] }, { "method":"DELETE", "name":"Deletes an IP address from blacklist", "description":"\n Deletes an IP address from a\n blacklist.\n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"DELETE\n '\/customers\/12345678\/domains\/example.com\/spam\/ipblacklist\/216.12.34.1',\n 'text\/xml'\" });", "schema":"" } ], "responses":[  ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"customers/{customer_account_number}/domains/{domain_name}/spam/safelist", "parameters":{ "customer_account_number":{ "description":"The customer account\n number.\n", "type":"", "required":"true", "default":"", "example":"", "values":[  ] }, "domain_name":{ "description":"The domain\n name.\n", "type":"", "required":"true", "default":"", "example":"", "values":[  ] } }, "headers":{  }, "actions":[ { "method":"GET", "name":"Lists email addresses in safelist", "description":"\n Lists the email addresses in a\n safelist associated with a domain.\n Remarks\n \n \n The Index operation only supports the GET\n HTTP verb.\n \n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"GET\n '\/customers\/12345678\/domains\/example.com\/spam\/safelist',\n 'text\/xml'\" });", "schema":"" } ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n <safelist\n xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n xmlns:xsd=\"http:\/\/www.w3.org\/2001\/XMLSchema\"\n xmlns=\"urn:xml:safelist\"> <addresses>\n <address>name1@notspam.com<\/address>\n <address>name2@notspam.com<\/address>\n <\/addresses>\n <\/safelist>", "schema":"" }, { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\"addresses\":[\"name1@notspam.com\",\"name2@notspam.com\"]}", "schema":"" } ] } ] }, { "method":"PUT", "name":"Update email addresses in safelist", "description":"\n Updates email addresses in a\n safelist.\n Remarks\n You can use a '%' as a wild card in domains, but not\n in the TLD (.com, .net, etc). You cannot use wild\n cards in email addresses. For example, the following\n are allowed: @%.example.com, @examp%.com.\n \n Request Data\n \n \n \n Field Name\n \n \n Data Type\n \n \n Description\n \n \n \n \n \n addList\n string\n Comma separated list of email addresses to\n add to the list\n \n \n removeList\n string\n Comma separated list of email addresses to\n remove from the list\n \n \n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"PUT\n '\/customers\/12345678\/domains\/example.com\/spam\/safelist',\n { 'addList' =\\u003E\n '@%.example.com,abc@example.com', 'removeList'\n =\\u003E '@examp%.com' }, 'text\/xml'\"\n });", "schema":"" } ], "responses":[  ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"customers/{customer_account_number}/domains/{domain_name}/spam/safelist/{email_address}", "parameters":{ "customer_account_number":{ "description":"The customer account\n number.\n", "type":"", "required":"true", "default":"", "example":"", "values":[  ] }, "domain_name":{ "description":"The domain\n name.\n", "type":"", "required":"true", "default":"", "example":"", "values":[  ] }, "email_address":{ "description":"The email\n address.\n", "type":"", "required":"true", "default":"", "example":"", "values":[  ] } }, "headers":{  }, "actions":[ { "method":"POST", "name":"Add email address or domain to safelist", "description":"\n Adds an email address or a domain\n to a safelist.\n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"POST\n '\/customers\/12345678\/domains\/example.com\/spam\/safelist\/anyone@yahoo.com',\n 'text\/xml'\" });", "schema":"" } ], "responses":[  ] } ] }, { "method":"DELETE", "name":"Delete email address or domain from safelist", "description":"\n Deletes an email address or domain\n from a safelist.\n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"DELETE\n '\/customers\/12345678\/domains\/example.com\/spam\/safelist\/anyone@yahoo.com',\n 'text\/xml'\" });", "schema":"" } ], "responses":[  ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"customers/{customer_account_number}/domains/{domain_name}/ipsafelist", "parameters":{ "customer_account_number":{ "description":"The customer account\n number.\n", "type":"", "required":"true", "default":"", "example":"", "values":[  ] }, "domain_name":{ "description":"The domain\n name.\n", "type":"", "required":"true", "default":"", "example":"", "values":[  ] } }, "headers":{  }, "actions":[ { "method":"GET", "name":"List IP addresses in safelist", "description":"\n Lists the IP addresses in a\n safelist associated with a domain.\n Remarks\n \n \n The Index operation only supports the GET\n HTTP verb.\n \n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"GET\n '\/customers\/12345678\/domains\/example.com\/spam\/ipsafelist',\n 'text\/xml'\" });", "schema":"" } ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n <ipSafelist\n xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n xmlns:xsd=\"http:\/\/www.w3.org\/2001\/XMLSchema\"\n xmlns=\"urn:xml:ipSafelist\">\n <addresses>\n <ip>192.168.0.1<\/ip>\n <ip>192.168.0.2<\/ip>\n <\/addresses>\n <\/ipSafelist>", "schema":"" }, { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\"addresses\":[\"192.168.0.1\",\"192.168.0.2\"]}", "schema":"" } ] } ] }, { "method":"PUT", "name":"Update IP addresses in safelist", "description":"\n Updates the IP addresses in a\n safelist.\n Remarks\n You can use a '%' as a wild card in the last octets\n to specify IP ranges. For example: 216.12.34.%,\n 216.12.%.%, 216.%.%.%.\n \n Request Data\n \n \n \n Field Name\n \n \n Data Type\n \n \n Description\n \n \n \n \n \n addList\n string\n Comma separated list of IP addresses to\n add to the list\n \n \n removeList\n string\n Comma separated list of IP addresses to\n remove from the list\n \n \n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"PUT\n '\/customers\/12345678\/domains\/example.com\/spam\/ipsafelist',\n { 'addList' =\\u003E '216.12.34.%,216.12.%.%',\n 'removeList' =\\u003E '216.%.%.%' },\n 'text\/xml'\" });", "schema":"" } ], "responses":[  ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"customers/{customer_account_number}/domains/{domain_name}/ipsafelist/{ip_address}", "parameters":{ "customer_account_number":{ "description":"The customer account\n number.\n", "type":"", "required":"true", "default":"", "example":"", "values":[  ] }, "domain_name":{ "description":"The domain\n name.\n", "type":"", "required":"true", "default":"", "example":"", "values":[  ] }, "ip_address":{ "description":"The IP\n address.\n", "type":"", "required":"true", "default":"", "example":"", "values":[  ] } }, "headers":{  }, "actions":[ { "method":"POST", "name":"Add IP address to safelist", "description":"\n Adds an IP address to a\n safelist.\n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"POST\n '\/customers\/12345678\/domains\/example.com\/spam\/safelist\/216.12.34.1',\n 'text\/xml'\" });", "schema":"" } ], "responses":[  ] } ] }, { "method":"DELETE", "name":"Delete IP address from safelist", "description":"\n Deletes an IP address from a\n safelist.\n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"DELETE\n '\/customers\/12345678\/domains\/example.com\/spam\/ipsafelist\/216.12.34.1',\n 'text\/xml'\" });", "schema":"" } ], "responses":[  ] } ] } ] } ] } ] }