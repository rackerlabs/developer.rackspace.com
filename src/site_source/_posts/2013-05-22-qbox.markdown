---
layout: post
title: "Unleash the Power of Auto-Complete"
date: 2013-05-22 15:30
comments: true
author: Hart Hoover
published: true
categories: 
- ElasticSearch
- Qbox
- Startups
---
It’s no secret that Rackspace has taken an interest in innovative startups that can get their arms around emerging Big Data technologies, package them in a hosted environment and sell them as a service. The trend is good for customers who won’t have to build and scale out infrastructure. It’s good for stimulating open technologies. It’s good for our partners in the [Rackspace Startup Program][1]. And it’s good for Rackspace.

One such prototypical effort has been under development by our friends at [Qbox.io][2], which just launched a search-as-a-service project around [Hosted ElasticSearch][2]. The project was built out by [StackSearch][3], a Fayetteville, Ark.-based startup, and a Startup Program member. Along with [Apache Solr][4], ElasticSearch is the bleeding edge of open-source search servers. [ElasticSearch][5], the open-source project, began four years ago, led by Shay Bannon, who now leads a [for-profit company][6] by the same name. The eco-system is growing rapidly, as evidenced by some astounding fundraising by the Amsterdam-based company.

<!-- more -->

Qbox builds upon that and provides managed indexes of ElasticSearch. Instead of installing, scaling, maintaining, patching, backing up and monitoring an ElasticSearch cluster, you can just get your endpoint and go, potentially shaving weeks of development time from your search app project. What [Cloudant][7] is to CouchDB or [ObjectRocket][8] is to Mongo, Qbox will be for ElasticSearch.

Many of the sexiest Big Data technologies are great persistent data stores or key value stores and have been transformative in this respect, but sadly lack when it comes to having best-practice search functionality. Yes, many developers can and do roll their own features, but why do that when you can get it out of the box? These features include multi-select faceting, auto-complete, auto-suggest, synonyms, spelling, “Did you mean?” and others.  While ElasticSearch can be used as your primary data store, most use it in conjunction with one of these other technologies to deliver the search features their end users expect.

With the help of [Ben Hundley][9], the lead architect on Qbox, here is a short tutorial on how to unleash auto-complete/auto-suggest as a feature:

Auto-complete (e.g. the slick functionality you see when you begin typing in the search box at the top of your Facebook feed) is an extremely popular feature in applications these days. While a wildcard query in a typical data store like MySQL or MongoDB performs adequately with thousands of records, producing near-instant response times with millions or even billions of records would be a joke. ElasticSearch is a powerful tool for large datasets needing full-text queries. In this simple walkthrough, I’ll demonstrate implementing a quick and dirty auto-complete feature in ElasticSearch using the popular [Ruby-based client library Tire][10] and a qbox.io endpoint.

First, we’ll require Tire and pass our endpoint to the configuration block.

```ruby
require 'tire'


Tire.configure do
 url "http://api.qbox.io/xxxxxxxx"
end
```

Next, we’ll define some settings and an index mapping.

```ruby
CONFIGURATION = {
 mappings: {
  product: {
   properties: {
    title: {
     type: "multi_field",
     fields: {
      title: { type: "string" },
      sortable: { type: "string", index: "not_analyzed" },
      autocomplete: { type: "string", index_analyzer: "shingle_analyzer" }
     }
    }
   }
  }
 },
 settings: {
  analysis: {
   filter: {
    shingle_filter: {
     type: "shingle",
     min_shingle_size: 2,
     max_shingle_size: 5
    }
   },
   analyzer: {
    shingle_analyzer: {
     type: "custom",
     tokenizer: "standard",
     filter: ["lowercase", "shingle_filter"]
    }
   }
  }
 }
}
```

This may look complex, but all it’s really doing is defining a field with three different means of tokenization for the title field of “product” documents. That means that when we index a document that looks like this:

```
{ title: "this is a shingle test" }
```

The actual main “title” field will use the default tokenizer, the “title.sortable” field with no analyzer will be left untouched for the purpose of sorting, and most importantly, the “title.autocomplete” field will return tokens like the following:

```
this
this is
this is a
this is a shingle
this is a shingle test
is
is a
is a shingle
is a shingle test
a
a shingle
a shingle test
shingle
shingle test
test
```

Forget about whatever tokenization means and focus on the fact that with this special “shingle” filter, we can now return the titles of documents when given fractions of words -- which is exactly what’s necessary for the key-press invoked AJAX calls you’ll need to implement auto-complete like you see on Facebook or Google Instant.

Let’s create the index and import some dummy products.

```ruby
PRODUCTS = [
 { type: "product", title: "Tremors" },
 { type: "product", title: "Tremors 2: Aftershocks" },
 { type: "product", title: "Tremors 3: Back to Perfection" },
 { type: "product", title: "Tremors 4: The Legend Begins" },
 { type: "product", title: "True Blood" },
 { type: "product", title: "Tron" },
 { type: "product", title: "True Grit" },
 { type: "product", title: "Land Before Time" },
 { type: "product", title: "The Shining" },
 { type: "product", title: "Good Burger" }
]


Tire.index "products" do
 create CONFIGURATION
 import PRODUCTS
end
```

At this point, we can perform a simple prefix query and print out the matched titles -- cake!

```ruby
search = Tire.search "products" do
 query { prefix 'title.autocomplete', 'tr' }
 sort { by 'title.sortable', 'asc' }
end


puts search.results.map(&:title)


# Tremors
# Tremors 2: Aftershocks
# Tremors 3: Back to Perfection
# Tremors 4: The Legend Begins
# Tron
# True Blood
# True Grit
```

With a bit of JavaScript knowledge and a library like [Twitter Typeahead][11], you’re only a few minutes away from a sexy auto-complete feature!

Qbox has a free developer tier with one shard per index, and should be available soon on the [Rackspace Cloud Tools Marketplace][12]. It can be launched from the Marketplace, or directly from the qbox.io website. Finally, for readers of the DevOps blog, [StackSearch CEO Mark Brandon][13] has given us a promo code for some free 90-day trials on any of the plan tiers, including the Enterprise plan that comes with four shards per index and three replicas - just use the [promo code "RAX"][14] when checking out. 

[1]: http://www.rackspacestartups.com/
[2]: http://qbox.io
[3]: http://stacksearch.com/
[4]: http://lucene.apache.org/solr/
[5]: http://elasticsearch.org
[6]: http://elasticsearch.com
[7]: http://www.rackspace.com/blog/were-investing-in-cloudant-for-nosql-dbaas/
[8]: http://www.rackspace.com/blog/newsarticles/objectrocket/
[9]: http://about.me/benhundley
[10]: https://github.com/karmi/tire
[11]: https://github.com/twitter/typeahead.js/
[12]: https://cloudtools.rackspace.com/home
[13]: http://about.me/markebrandon
[14]: https://qbox.io/signup?promotion_code=RAX
