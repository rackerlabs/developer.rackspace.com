---
- name: Disable password authentication for SSH
  copy: src=etc/ssh/sshd_config dest=/etc/ssh/sshd_config owner=root group=root mode=0644
  notify:
  - restart ssh server

- name: Create Jenkins users, jobs and other DRG-specific configuration
  sudo: yes
  copy:
    src: var/lib/jenkins/
    dest: /var/lib/jenkins/
  notify:
    - 'Restart Jenkins'

- name: Setup correct permissions
  sudo: yes
  file:
    path: /var/lib/jenkins/publisher.id_rsa
    mode: 0600

- name: Copy motd file
  copy: src=etc/motd dest=/etc/motd owner=root group=root mode=0644

- name: Dynamically set Jenkins IP address in Jenkins config file
  sudo: yes
  template:
    src: var/lib/jenkins/jenkins.model.JenkinsLocationConfiguration.xml.j2
    dest: /var/lib/jenkins/jenkins.model.JenkinsLocationConfiguration.xml
  notify:
    - 'Restart Jenkins'

- name: Create directory for 'build_prod_site' job
  sudo: yes
  file:
    path: "/var/lib/jenkins/jobs/build_prod_site"
    state: directory
    owner: jenkins
    group: jenkins
  notify:
    - 'Restart Jenkins'

- name: Dynamically create 'build_prod_site' job config with production web server IP list
  sudo: yes
  template:
    src: "var/lib/jenkins/jobs/build_prod_site/config.xml.j2"
    dest: "/var/lib/jenkins/jobs/build_prod_site/config.xml"
  notify:
    - 'Restart Jenkins'

- name: Create directory for 'build_staging_site' job
  sudo: yes
  file:
    path: "/var/lib/jenkins/jobs/build_staging_site"
    state: directory
    owner: jenkins
    group: jenkins
  notify:
    - 'Restart Jenkins'

- name: Dynamically create 'build_staging_site' job config with staging web server IP list
  sudo: yes
  template:
    src: "var/lib/jenkins/jobs/build_staging_site/config.xml.j2"
    dest: "/var/lib/jenkins/jobs/build_staging_site/config.xml"
  notify:
    - 'Restart Jenkins'

- name: Setup correct ownerships
  sudo: yes
  file:
    path: /var/lib/jenkins/
    state: directory
    recurse: yes
    owner: jenkins
    group: jenkins
  notify:
    - 'Restart Jenkins'

- name: Build tools
  apt: pkg={{ item }} state=installed
  with_items:
  - build-essential
  - python-dev

- name: pip
  shell: curl --show-error --retry 5 https://bootstrap.pypa.io/get-pip.py | python
         creates=/usr/local/bin/pip

- name: ansibleception
  pip: name=ansible state=present

- name: Create the inventory directory
  file: dest=/etc/ansible state=directory mode=0755

- name: Create an inventory
  template: src=etc/ansible/hosts.j2 dest=/etc/ansible/hosts mode=0644

- name: Register SSH host signatures for each production webserver
  command: ssh-keyscan -H {{ hostvars[item]['rax_networks']['private'][0] }}
  register: ssh_signatures
  with_items: groups['prod_webservers'] + groups['staging_webservers']

- name: Trust the SSH signatures we just collected
  lineinfile: "dest=/var/lib/jenkins/.ssh/known_hosts
               line='{{ item.stdout | trim }}'
               create=yes
               state=present"
  with_items: ssh_signatures.results

- name: Get localhost's SSH signature
  command: ssh-keyscan -H 127.0.0.1
  register: localhost_signature

- name: Trust localhost's SSH signature
  lineinfile: "dest=/var/lib/jenkins/.ssh/known_hosts
               line='{{ localhost_signature.stdout | trim }}'
               create=yes
               state=present"

- name: Log the firewall
  ufw: logging=on

# Jenkins can only be accessed from specific hosts
# over SSH
- name: Allow SSH access from specific hosts
  ufw: rule=allow src={{ item }} port=22 proto=tcp
  with_items: ip_accesses

# As well as on the web
- name: Allow access to 8080 from specific hosts
  ufw: rule=allow src={{ item }} port=8080 proto=tcp direction=in
  with_items: ip_accesses

- name: Drop everything else
  ufw: policy=reject state=enabled
